apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// load properties
Properties properties = new Properties()
File localPropertiesFile = project.file("local.properties");
if(localPropertiesFile.exists()){
    properties.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.file("project.properties");
if(projectPropertiesFile.exists()){
    properties.load(projectPropertiesFile.newDataInputStream())
}

// read properties
def projectName = properties.getProperty("project.name")
def projectDescription = properties.getProperty("project.description")
def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = android.defaultConfig.versionName
def projectPackaging = properties.getProperty("project.packaging")
def projectSiteUrl = properties.getProperty("project.siteUrl")
def projectGitUrl = properties.getProperty("project.gitUrl")

def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")

def bintrayUser = properties.getProperty("bintray.user")
def bintrayApikey = properties.getProperty("bintray.apikey")
def bintrayGpgPwd = properties.getProperty("bintray.gpg.password")

def ossUser = properties.getProperty("bintray.oss.user")
def ossPwd = properties.getProperty("bintray.oss.password")

def javadocName = properties.getProperty("javadoc.name")

def licenseName = properties.getProperty("license.name")
def licenseUrl = properties.getProperty("license.url")
def licenseDescription = properties.getProperty("license.description")

version projectVersionName
group = projectGroupId

// This generates POM.xml with proper parameters
install {
    repositories.mavenInstaller {
        pom {
            project {
                name projectName
                description projectDescription 
                //groupId projectGroupId
                //artifactId projectArtifactId
                packaging projectPackaging
                url projectSiteUrl
                licenses {
                    license {
                        name licenseDescription
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection projectGitUrl
                    developerConnection projectGitUrl
                    url projectSiteUrl
                }
            }
        }
    }
}

// This generates sources.jar
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    android.libraryVariants.all { variant ->
        println variant.javaCompile.classpath.files
        if(variant.name == 'release') { //我们只需 release 的 javadoc
            task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
                // title = ''
                // description = ''
                source = variant.javaCompile.source
                classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
                options {
                    encoding "utf-8"
                    links "http://docs.oracle.com/javase/7/docs/api/"
                    linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
                }
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }
            task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
                classifier = 'javadoc'
                from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
            }
            artifacts {
                archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
            }
        }
    }
}

// This generates javadoc.jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// javadoc configuration
javadoc {
    options{
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version projectVersionName
        links "http://docs.oracle.com/javase/7/docs/api"
        title javadocName
    }
}

// bintray configuration
bintray {
    user = bintrayUser
    key = bintrayApikey
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = projectName
        websiteUrl = projectSiteUrl
        vcsUrl = projectGitUrl
        licenses = [licenseName]
        publish = true
        version {
            gpg {
              sign = true //Determines whether to GPG sign the files. The default is false
              passphrase = bintrayGpgPwd //Optional. The passphrase for GPG signing'
            }
            mavenCentralSync {
                sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = ossUser //OSS user token
                password = ossPwd //OSS user password
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }        
    }
}
